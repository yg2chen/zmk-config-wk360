#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <900>;
    quick-release;
};

/ {
    behaviors {
        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&magic_shift LEFT_SHIFT LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 34 35 36 37 38 39 48 49 50 51 52 66 67 38 39 48 49 50 51 52 53 66 67 64 65>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 41 42 43 44 45 0 1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 41 42 43 44 45 12 55 56 57 54>;
        };

        smart_caps: smart_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_CAPS";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPSLOCK>;

            tapping-term-ms = <175>;
        };

        smart_caps_layer: smart_caps_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_CAPS_LAYER";
            bindings = <&mo>, <&smart_caps>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <200>;
            flavor = "tap-preferred";
        };

        magic_shift: magic_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_SHIFT";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };

        moprh_lpara_lt: moprh_lpara_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "MOPRH_LPARA_LT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_rpara_gt: morph_rpara_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_RPARA_GT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bs_del: bs_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BS_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            display-name = "Base";
            bindings = <
&kp EQUAL                   &kp N1  &kp N2            &kp N3          &kp N4                &kp N5                                                                                &kp N6  &kp N7                 &kp N8           &kp N9             &kp N0         &kp MINUS
&kp TAB                     &kp Q   &kp W             &kp E           &kp R                 &kp T                                                                                 &kp Y   &kp U                  &kp I            &kp O              &kp P          &kp BACKSLASH
&smart_caps_layer 1 0       &kp A   &kp S             &kp D           &kp F                 &kp G                  &kp LCTRL   &kp LALT      &kp LMETA      &kp RCTRL             &kp H   &kp J                  &kp K            &kp L              &kp SEMICOLON  &kp SQT
&magic_shift LSHIFT LSHIFT  &kp Z   &kp X             &kp C           &kp V                 &kp B                              &kp HOME      &kp PAGE_UP                          &kp N   &kp M                  &kp COMMA        &kp DOT            &kp FSLH       &magic_shift RSHIFT RSHIFT
                            &mo 2   &kp LEFT_BRACKET  &kp LEFT_BRACE  &kp LEFT_PARENTHESIS          &kp BACKSPACE  &kp ESCAPE  &kp END       &kp PAGE_DOWN  &kp ENTER  &kp SPACE          &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp GRAVE
            >;
        };

        func {
            bindings = <
&kp F1  &kp F2          &kp F3        &kp F4        &kp F5        &kp F7                                                                      &kp F7  &kp F8           &kp F9             &kp F10     &kp F11           &kp F12
&trans  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                                                &trans  &trans           &trans             &trans      &kp PRINTSCREEN   &trans
&trans  &bt BT_CLR_ALL  &trans        &trans        &trans        &trans                &bootloader  &trans      &trans  &bootloader          &trans  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_MUTE  &kp C_PLAY_PAUSE  &trans
&trans  &trans          &trans        &bt BT_CLR    &trans        &trans                             &trans      &trans                       &trans  &kp C_NEXT       &kp C_PREV         &trans      &trans            &trans
        &trans          &trans        &trans        &trans                      &trans  &trans       &trans      &trans  &trans       &trans          &trans           &trans             &trans      &trans
            >;
        };

        navs {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                                      &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                      &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans      &trans  &trans          &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans    &trans    &trans  &trans     &trans  &trans
        &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans            &trans    &trans  &trans     &trans
            >;
        };
    };
};
