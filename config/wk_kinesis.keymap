#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <900>;
    quick-release;
};

/ {
    behaviors {
        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 34 35 36 37 38 39 48 49 50 51 52 66 67>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 24 25 26 27 28 29 41 42 43 44 45>;
        };

        smart_caps: smart_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_CAPS";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPSLOCK>;

            tapping-term-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
&kp EQUAL       &kp N1            &kp N2             &kp N3    &kp N4     &kp N5                                                                                     &kp N6  &kp N7          &kp N8     &kp N9     &kp N0    &kp MINUS
&kp TAB         &kp Q             &kp W              &kp E     &kp R      &kp T                                                                                      &kp Y   &kp U           &kp I      &kp O      &kp P     &kp BACKSLASH
&smart_caps     &kp A             &kp S              &kp D     &kp F      &kp G                  &kp LCTRL  &kp LEFT_META      &kp LEFT_ALT   &kp RCTRL              &kp H   &kp J           &kp K      &kp L      &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z             &kp X              &kp C     &kp V      &kp B                             &kp HOME           &kp PAGE_UP                           &kp N   &kp M           &kp COMMA  &kp DOT    &kp FSLH  &kp RIGHT_SHIFT
                &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT  &kp RIGHT          &kp BACKSPACE  &kp ENTER  &kp END            &kp PAGE_DOWN  &kp ESCAPE  &kp SPACE          &kp DOWN_ARROW  &kp UP     &kp GRAVE  &mo 1
            >;
        };

        layer_1 {
            bindings = <
&kp F1  &kp F2          &kp F3        &kp F4        &kp F5        &kp F7                                                                      &kp F7  &kp F8           &kp F9             &kp F10     &kp F11           &kp F12
&trans  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                                                &trans  &trans           &trans             &trans      &kp PRINTSCREEN   &trans
&trans  &bt BT_CLR_ALL  &trans        &trans        &trans        &trans                &bootloader  &trans      &trans  &bootloader          &trans  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_MUTE  &kp C_PLAY_PAUSE  &trans
&trans  &trans          &trans        &bt BT_CLR    &trans        &trans                             &trans      &trans                       &trans  &kp C_NEXT       &kp C_PREV         &trans      &trans            &trans
        &trans          &trans        &trans        &trans                      &trans  &trans       &trans      &trans  &trans       &trans          &trans           &trans             &trans      &trans
            >;
        };
    };
};
